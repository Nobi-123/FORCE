from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from config import BOT_USERNAME, SUPPORT_GROUP, UPDATE_CHANNEL, START_IMAGE, OWNER_ID
import db


def register_handlers(app: Client):

    # ==========================================================
    # Start Menu
    # ==========================================================
    async def send_start_menu(message, user):
        text = f"""
‚ú®  ú·¥á è {user}! ‚ú®  

…™‚Äô·¥ç ·¥Ä…¥ ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥Ä…™  ô·¥è·¥õ ‚öôÔ∏è  
·¥Ö·¥ás…™…¢…¥·¥á·¥Ö ·¥õ·¥è ·¥ã·¥á·¥á·¥ò  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ·¥Ñ ü·¥á·¥Ä…¥, s·¥ÄÍú∞·¥á, ·¥Ä…¥·¥Ö ·¥è Ä…¢·¥Ä…¥…™·¥¢·¥á·¥Ö.

‚ö° ·¥° ú·¥Ä·¥õ …™ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è:
‚Ä¢ ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ ·¥Ä…¥·¥Ö  ô ü·¥è·¥Ñ·¥ã s·¥ò·¥Ä·¥ç …™…¥  Ä·¥á·¥Ä ü-·¥õ…™·¥ç·¥á  
‚Ä¢ ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥ás, ·¥ç·¥ú·¥õ·¥ás, ·¥Ä…¥·¥Ö  ü·¥è·¥Ñ·¥ãs  
‚Ä¢ s·¥ç·¥Ä Ä·¥õ ·¥Ñ·¥è…¥·¥õ Ä·¥è üs “ì·¥è Ä  ü…™…¥·¥ãs, ·¥ç·¥á·¥Ö…™·¥Ä, ·¥Ä…¥·¥Ö ·¥ús·¥á Äs  
‚Ä¢ s ü·¥á·¥á·¥ã …™…¥ ü…™…¥·¥á ·¥ç·¥á…¥·¥ús ·¥õ·¥è ·¥ç·¥Ä·¥ã·¥á …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ·¥á·¥Äs è
"""

        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï ·¥Ä·¥Ö·¥Ö ·¥õ·¥è …¢ Ä·¥è·¥ú·¥ò", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")],
            [
                InlineKeyboardButton("üì¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url=UPDATE_CHANNEL),
                InlineKeyboardButton("üí¨ s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=SUPPORT_GROUP),
            ],
            [
                InlineKeyboardButton("üëë ·¥è·¥°…¥·¥á Ä", user_id=OWNER_ID)
            ],
            [InlineKeyboardButton("üìñ  ú·¥á ü·¥ò ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="help")]
        ])

        if message.text:
            await message.reply_photo(START_IMAGE, caption=text, reply_markup=buttons)
        else:
            media = InputMediaPhoto(media=START_IMAGE, caption=text)
            await message.edit_media(media=media, reply_markup=buttons)

    # ==========================================================
    # /start Command
    # ==========================================================
    @app.on_message(filters.private & filters.command("start"))
    async def start_command(client, message):
        user = message.from_user
        await db.add_user(user.id, user.first_name)
        await send_start_menu(message, user.first_name)

    # ==========================================================
    # Help Menu
    # ==========================================================
    async def send_help_menu(message):
        text = """
‚ú®  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú ‚ú®

·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥õ ú·¥á  ú·¥á ü·¥ò s·¥á·¥Ñ·¥õ…™·¥è…¥!  
·¥Ñ ú·¥è·¥ès·¥á ·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä è ·¥õ·¥è  ü·¥á·¥Ä Ä…¥ ·¥ç·¥è Ä·¥á.

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí¨ …¢ Ä·¥á·¥á·¥õ…™…¥…¢s ‚Äî ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás  
üîí  ü·¥è·¥Ñ·¥ãs ‚Äî ·¥ú Ä ü, ·¥ç·¥á·¥Ö…™·¥Ä,  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á ·¥Ñ·¥è…¥·¥õ Ä·¥è ü  
‚öôÔ∏è ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ…™·¥è…¥ ‚Äî ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥ús·¥á Äs ·¥á·¥Äs…™ ü è
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

·¥õ·¥Ä·¥ò ·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è s·¥á·¥á ·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‚Üì
"""
        buttons = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üí¨ …¢ Ä·¥á·¥á·¥õ…™…¥…¢s", callback_data="greetings"),
                InlineKeyboardButton("üîí  ü·¥è·¥Ñ·¥ãs", callback_data="locks"),
            ],
            [InlineKeyboardButton("‚öôÔ∏è ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ…™·¥è…¥", callback_data="moderation")],
            [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="back_to_start")]
        ])

        media = InputMediaPhoto(media=START_IMAGE, caption=text)
        await message.edit_media(media=media, reply_markup=buttons)

    # ==========================================================
    # Help Callback
    # ==========================================================
    @app.on_callback_query(filters.regex("help"))
    async def help_callback(client, callback_query):
        await send_help_menu(callback_query.message)
        await callback_query.answer()

    # ==========================================================
    # Back to Start
    # ==========================================================
    @app.on_callback_query(filters.regex("back_to_start"))
    async def back_to_start_callback(client, callback_query):
        user = callback_query.from_user.first_name
        await send_start_menu(callback_query.message, user)
        await callback_query.answer()

    # ==========================================================
    # Greetings Callback
    # ==========================================================
    @app.on_callback_query(filters.regex("greetings"))
    async def greetings_callback(client, callback_query):
        text = """
üí¨ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á s ès·¥õ·¥á·¥ç

üéØ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò‚Äôs ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás:

/setwelcome <text> ‚Äî s·¥á·¥õ ·¥Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á  
/welcome on ‚Äî ·¥á…¥·¥Ä ô ü·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥ás  
/welcome off ‚Äî ·¥Ö…™s·¥Ä ô ü·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥ás

‚ú® ·¥ò ü·¥Ä·¥Ñ·¥á ú·¥è ü·¥Ö·¥á Äs:
{username}, {first_name}, {id}, {mention}
"""
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="help")]
        ])
        media = InputMediaPhoto(media=START_IMAGE, caption=text)
        await callback_query.message.edit_media(media=media, reply_markup=buttons)
        await callback_query.answer()

    # ==========================================================
    # Locks Callback
    # ==========================================================
    @app.on_callback_query(filters.regex("locks"))
    async def locks_callback(client, callback_query):
        text = """
üîí  ü·¥è·¥Ñ·¥ã s ès·¥õ·¥á·¥ç

/lock <type> ‚Äî ·¥á…¥·¥Ä ô ü·¥á ·¥Ä  ü·¥è·¥Ñ·¥ã  
/unlock <type> ‚Äî ·¥Ö…™s·¥Ä ô ü·¥á ·¥Ä  ü·¥è·¥Ñ·¥ã  
/locks ‚Äî ·¥†…™·¥á·¥° ·¥Ä·¥Ñ·¥õ…™·¥†·¥á  ü·¥è·¥Ñ·¥ãs

üîπ ·¥õ è·¥ò·¥ás ·¥è“ì  ü·¥è·¥Ñ·¥ãs:
url | sticker | media | username | language
"""
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="help")]
        ])
        media = InputMediaPhoto(media=START_IMAGE, caption=text)
        await callback_query.message.edit_media(media=media, reply_markup=buttons)
        await callback_query.answer()

    # ==========================================================
    # Moderation Callback
    # ==========================================================
    @app.on_callback_query(filters.regex("moderation"))
    async def moderation_callback(client, callback_query):
        try:
            text = """
‚öôÔ∏è ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ…™·¥è…¥ ·¥õ·¥è·¥è üs

/kick <user> ‚Äî  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ·¥ç·¥á·¥ç ô·¥á Ä  
/ban <user> ‚Äî  ô·¥Ä…¥ ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ ü è  
/unban <user> ‚Äî ·¥ú…¥ ô·¥Ä…¥ ·¥Ä ·¥ús·¥á Ä  
/mute <user> ‚Äî ·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥ús·¥á Ä  
/unmute <user> ‚Äî ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥ús·¥á Ä  
/warn <user> ‚Äî ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥°·¥Ä Ä…¥…™…¥…¢  
/warns <user> ‚Äî ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥°·¥Ä Ä…¥s  
/resetwarns <user> ‚Äî ·¥Ñ ü·¥á·¥Ä Ä ·¥Ä ü ü  
/promote <user> ‚Äî ·¥ç·¥Ä·¥ã·¥á ·¥Ä·¥Ö·¥ç…™…¥  
/demote <user> ‚Äî  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥Ö·¥ç…™…¥

üí° Example:
Reply to a user or type  
/ban @username
"""
            buttons = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã", callback_data="help")]
            ])
            media = InputMediaPhoto(media=START_IMAGE, caption=text)
            await callback_query.message.edit_media(media=media, reply_markup=buttons)
            await callback_query.answer()

        except Exception as e:
            print(f"Error in moderation_callback: {e}")
            await callback_query.answer("‚ùå Something went wrong.", show_alert=True)

    # ==========================================================
    # Broadcast
    # ==========================================================
    @app.on_message(filters.private & filters.command("broadcast"))
    async def broadcast_message(client, message):
        if message.from_user.id != OWNER_ID:
            return await message.reply_text("‚ùå Only the bot owner can use this command.")

        if not message.reply_to_message:
            return await message.reply_text("‚ö†Ô∏è Please reply to a message to broadcast it.")

        text_to_send = message.reply_to_message.text or message.reply_to_message.caption
        if not text_to_send:
            return await message.reply_text("‚ö†Ô∏è The replied message has no text to send.")

        users = await db.get_all_users()
        sent, failed = 0, 0
        await message.reply_text(f"üì° Broadcasting to {len(users)} users...")

        for user_id in users:
            try:
                await client.send_message(user_id, text_to_send)
                sent += 1
            except Exception:
                failed += 1

        await message.reply_text(f"‚úÖ Broadcast completed!\n\nSent: {sent}\nFailed: {failed}")

    # ==========================================================
    # Stats
    # ==========================================================
    @app.on_message(filters.private & filters.command("stats"))
    async def stats_command(client, message):
        if message.from_user.id != OWNER_ID:
            return await message.reply_text("‚ùå Only the bot owner can use this command.")
        users = await db.get_all_users()
        await message.reply_text(f"üìä Total registered users: {len(users)}")